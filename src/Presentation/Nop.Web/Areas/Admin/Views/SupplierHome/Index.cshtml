@model Nop.Web.Areas.Admin.Models.Suppliers.SupplierStatisticsModel
@inject IPermissionService permissionService
@using Nop.Services.Security
@{
    //page title
    ViewBag.PageTitle = T("Admin.Dashboard").Text;

    Layout = "_SupplierAdminLayout";

    var canManageOrders = await permissionService.AuthorizeAsync(StandardPermissionProvider.ManageOrders);
    var canManageCustomers = await permissionService.AuthorizeAsync(StandardPermissionProvider.ManageCustomers);
    var canManageProducts = await permissionService.AuthorizeAsync(StandardPermissionProvider.ManageProducts);
    var canManageReturnRequests = await permissionService.AuthorizeAsync(StandardPermissionProvider.ManageReturnRequests);

    //close configuration steps value
    const string closeCardAttributeName = "CloseConfigurationSteps";
    var closeConfigurationStepsCard = await genericAttributeService.GetAttributeAsync<bool>(await workContext.GetCurrentCustomerAsync(), closeCardAttributeName);

    //active menu item (system name)
    NopHtml.SetActiveMenuItemSystemName("Dashboard");
}

<link rel="stylesheet" href="~/lib_npm/ionicons/css/ionicons.min.css" />
<script src="~/lib_npm/chart.js/Chart.min.js" asp-location="Head"></script>

<!-- progress bar -->
<link rel="stylesheet" href="~/lib/progress/cssprogress.css" />
<div class="content-header">
    <h1>
        @T("Admin.Dashboard")
    </h1>
</div>
<section class="content  ">
    <div class="container-fluid">

        <div class="row">
            <!-- ------------order statitsc---------------------------- -->
            <div class="col-sm-12 col-md-6 col-lg-3">

                <div class="card widget">
                    <div class="card-body">
                        @{
                            var orderPercentageCSS = Model.NumberOfOrdersPercentage < 0 ? "text-warning" : "text-success";
                            var orderPercentage = $"{Math.Round(Model.NumberOfOrdersPercentage, 2)}%";
                            var orderArrow = Model.NumberOfOrdersPercentage < 0 ? "down" : "up";
                            var ordersValue = Model.NumberOfOrders > 1000 ? $"{Model.NumberOfOrders / 1000}K" : $"{Model.NumberOfOrders}";
                        }
                        <h5 class="card-title w-100 d-flex ">
                            @ordersValue
                            <div class="ml-auto">
                                <img src="@Url.Content("~/Themes/SuptomerTheme/Content/assets/img/admin/order-1_svgrepo.com.png")" alt=""/>

                            </div>

                        </h5>
                        <p class="card-text">Orders</p>
                        <p>


                            <img src="@Url.Content($"~/images/theme/arrow-{orderArrow}.png")" alt=""/>
                            <span class="@orderPercentageCSS persentage">@orderPercentage</span>
                            <span class="text-grey lbl-info">vs last month</span>
                        </p>

                    </div>
                    <div class="chart-area">
                        <canvas id="myChart" style="width:100%; "></canvas>
                    </div>
                </div>
            </div>
            <!-- ---------------------------------------- -->
            <!-- ------------order statitsc---------------------------- -->
            <div class="col-sm-12 col-md-6 col-lg-3">
                <div class="card widget">
                    <div class="card-body">
                        @{
                            var incomePercentageCSS = Model.TotalIncomePercentage < 0 ? "text-warning" : "text-success";
                            var incomePercentage = $"{Math.Round(Model.TotalIncomePercentage, 2)}%";
                            var incomeArrow = Model.TotalIncomePercentage < 0 ? "down" : "up";
                            var incomeValue = Model.TotalIncome > 1000 ? $"{Model.TotalIncome / 1000}K" : $"{Model.TotalIncome}";
                        }
                        <h5 class="card-title w-100 d-flex ">
                            @incomeValue SAR
                            <div class="ml-auto">
                                <img src="@Url.Content("~/Themes/SuptomerTheme/Content/assets/img/admin/stock.png")" alt=""/>

                            </div>

                        </h5>
                        <p class="card-text">Income</p>
                        <p>


                            <img src="@Url.Content($"~/images/theme/arrow-{incomeArrow}.png")" alt=""/>
                            <span class="@incomePercentageCSS persentage">@incomePercentage</span>
                            <span class="text-grey lbl-info">vs last month</span>
                        </p>

                    </div><div class="chart-area">
                        <canvas id="myChart2" style="width:100%; "></canvas>
                    </div>
                </div>
            </div>
            <!-- ---------------------------------------- -->
            <!-- ------------order statitsc---------------------------- -->
            <div class="col-sm-12 col-md-6 col-lg-3">
                <div class="card widget">
                    <div class="card-body">
                        @{
                            var returnsPercentageCSS = Model.NumberOfSalesReturnPercentage < 0 ? "text-warning" : "text-success";
                            var returnsPercentage = $"{Math.Round(Model.NumberOfSalesReturnPercentage, 2)}%";
                            var returnsArrow = Model.NumberOfSalesReturnPercentage < 0 ? "down" : "up";
                            var returnsValue = Model.NumberOfSalesReturn > 1000 ? $"{Model.NumberOfSalesReturn / 1000}K" : $"{Model.NumberOfSalesReturn}";
                        }
                        <h5 class="card-title w-100 d-flex ">
                            @returnsValue
                            <div class="ml-auto">
                                <img src="@Url.Content("~/Themes/SuptomerTheme/Content/assets/img/admin/return.png")" alt=""/>

                            </div>

                        </h5>
                        <p class="card-text">Sales Return</p>
                        <p>


                            <img src="@Url.Content($"~/images/theme/arrow-{returnsArrow}.png")" alt=""/>
                            <span class="@returnsPercentageCSS persentage">@returnsPercentage</span>
                            <span class="text-grey lbl-info">vs last month</span>
                        </p>

                    </div> <div class="chart-area">
                        <canvas id="myChart3" style="width:100%; "></canvas>
                    </div>
                </div>
            </div>
            <!-- ---------------------------------------- -->
            <!-- ------------order statitsc---------------------------- -->

            <div class="col-sm-12 col-md-6 col-lg-3">
                <div class="card widget">
                    <div class="card-body">
                        @{
                            var invoicePercentageCSS = Model.NumberOfInvoicesPercentge < 0 ? "text-warning" : "text-success";
                            var invoicePercentage = $"{Math.Round(Model.NumberOfInvoicesPercentge, 2)}%";
                            var invoiceArrow = Model.NumberOfInvoicesPercentge < 0 ? "down" : "up";
                            var invoiceValue = Model.NumberOfInvoices > 1000 ? $"{Model.NumberOfInvoices / 1000}K" : $"{Model.NumberOfInvoices}";
                        }
                        <h5 class="card-title w-100 d-flex ">
                            @invoiceValue
                            <div class="ml-auto">
                                <img src="@Url.Content("~/Themes/SuptomerTheme/Content/assets/img/admin/business-finance-invoice_svgrepo.com.png")" alt=""/>

                            </div>

                        </h5>
                        <p class="card-text">Invoices</p>
                        <p>


                            <img src="@Url.Content($"~/images/theme/arrow-{invoiceArrow}.png")" alt=""/>
                            <span class="@invoicePercentageCSS persentage">@invoicePercentage</span>
                            <span class="text-grey lbl-info">vs last month</span>
                        </p>

                    </div>
                    <div class="chart-area">
                        <canvas id="myChart4" style="width:100%; "></canvas>
                    </div>
                </div>
            </div>
            <!-- ---------------------------------------- -->
        </div>
        <!-- section 2 - sales reports -->
        <div class="row mt-3 align-items-stretch ">
            <!-- ------------order statitsc---------------------------- -->
            <div class="col-sm-12 col-md-6 col-lg-8">
                @await Html.PartialAsync("_OrderStatistics")
            </div>
            <!-- ---------------------------------------- -->
            <!-- ------------Area  statitsc---------------------------- -->
            <div class="col-sm-12 col-md-6 col-lg-4">
                <!-- ------------Product Progress report---------------------------- -->
                @await Html.PartialAsync("_ProductsAboutToExpire")

                <!-- ---------------------------------------- -->
                <div class="card widget-flex">
                    <div class="card-body p-2">
                        <p class="card-text left-card-title">Most active orders in cities</p>
                    </div>
                    <div class="chart-area">
                        @await Html.PartialAsync("_SaudiCities")
                    </div>
                </div>
            </div>
            <!-- ---------------------------------------- -->


        </div>
        <!-- section 3 - location and shipments reports -->
        <div class="row mt-3">
            <!-- ------------order statitsc---------------------------- -->
            <div class="col-sm-12 col-md-6 col-lg-8">
                @* <div class="card widget-flex">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        <p class="card-text">  Shipments over time</p>
                        <div class="filteration ml-auto">
                            <select name="" id="" class="chart_ddl ml-2"><option> Month</option></select>
                            <select name="" id="" class="chart_ddl ml-2"><option> year</option></select>
                        </div>
                    </div>
                    <div class="chart-area">
                        <canvas id="shippment_chart" style="width:100%; "></canvas>
                    </div>
                </div> *@
                
                @await Html.PartialAsync("_ShipmentStatistics")
            </div>

            <!-- ---------------------------------------- -->
            <!-- ------------order statitsc---------------------------- -->
            <div class="col-sm-12 col-md-6 col-lg-4">
                <div class="row align-items-center p-3">
                    <div class="col-6">
                        <div class="mb-3">
                            <p class="text-dark2 mb-2">Get more Discounts<br/>and vouchers</p>
                            <!-- <p class="text-light2">Lorem ipsum dolor sitamet consectetur.Viverra bibendum </p> -->
                        </div>
                        <!-- <a class="btn btn-outline-sm rounded" href="/Admin/Affiliate/List">Refer for other</a> -->
                        <a class="btn btn-outline-sm px-3 py-2 rounded" href="/">Refer for other</a>
                    </div>
                    <div class="col-6">
                        <img src="@Url.Content("~/Themes/SuptomerTheme/Content/assets/img/dash-card.svg")" alt="" style="width: 100%; height: auto;" />
                    </div>
                </div>
            </div>
            <!-- ---------------------------------------- -->
        </div>
    </div>
</section>

<!-- todo: search why i coan not seperate code in diff js file -->
<!-- progress bar -->

<script>
    var ctx = document.getElementById('myChart').getContext('2d');
    var ctx2 = document.getElementById('myChart2').getContext('2d');
    var ctx3 = document.getElementById('myChart3').getContext('2d');
    var ctx4 = document.getElementById('myChart4').getContext('2d');


    const xValues = [50, 60, 70, 80, 90, 100];
    const yValues = [7, 8, 20, 12, 10, 9, 6];
    var gradient = ctx.createLinearGradient(0, 200, 0, 0);
    gradient.addColorStop(0, 'rgba(61, 0, 94, 0.05');
    gradient.addColorStop(0.1, 'rgba(61, 0, 94,0.1');
    gradient.addColorStop(0.2, 'rgba(61, 0, 94, 0.2');
    gradient.addColorStop(0.3, 'rgba(61, 0, 94, 0.3');
    gradient.addColorStop(0.4, 'rgba(61, 0, 94, 0.4');
    gradient.addColorStop(0.5, 'rgba(61, 0, 94, 0.5');
    gradient.addColorStop(1, 'rgba(61, 0, 94, 0.7');

    var gradient = ctx2.createLinearGradient(0, 200, 0, 0);
    gradient.addColorStop(0, 'rgba(61, 0, 94, 0.05');
    gradient.addColorStop(0.1, 'rgba(61, 0, 94,0.1');
    gradient.addColorStop(0.2, 'rgba(61, 0, 94, 0.2');
    gradient.addColorStop(0.3, 'rgba(61, 0, 94, 0.3');
    gradient.addColorStop(0.4, 'rgba(61, 0, 94, 0.4');
    gradient.addColorStop(0.5, 'rgba(61, 0, 94, 0.5');
    gradient.addColorStop(1, 'rgba(61, 0, 94, 0.7');

    var gradient = ctx3.createLinearGradient(0, 200, 0, 0);
    gradient.addColorStop(0, 'rgba(61, 0, 94, 0.05');
    gradient.addColorStop(0.1, 'rgba(61, 0, 94,0.1');
    gradient.addColorStop(0.2, 'rgba(61, 0, 94, 0.2');
    gradient.addColorStop(0.3, 'rgba(61, 0, 94, 0.3');
    gradient.addColorStop(0.4, 'rgba(61, 0, 94, 0.4');
    gradient.addColorStop(0.5, 'rgba(61, 0, 94, 0.5');
    gradient.addColorStop(1, 'rgba(61, 0, 94, 0.7');

    var gradient = ctx4.createLinearGradient(0, 200, 0, 0);
    gradient.addColorStop(0, 'rgba(61, 0, 94, 0.05');
    gradient.addColorStop(0.1, 'rgba(61, 0, 94,0.1');
    gradient.addColorStop(0.2, 'rgba(61, 0, 94, 0.2');
    gradient.addColorStop(0.3, 'rgba(61, 0, 94, 0.3');
    gradient.addColorStop(0.4, 'rgba(61, 0, 94, 0.4');
    gradient.addColorStop(0.5, 'rgba(61, 0, 94, 0.5');
    gradient.addColorStop(1, 'rgba(61, 0, 94, 0.7');

    var chartOptions = {
        responsive: true,
        datasetStroke: true,
        datasetFill: true,
        legend: {
            display: false
        },
        scales: {

            y: {
                beginAtZero: true
            },

            yAxes: [{
                display: false
            }],
            xAxes: [{
                display: false
            }],
        },

    };
    const yValues2 = [8, 8, 50, 2, 100, 9, 6];

    var myChart = new Chart(ctx, {
        type: "line",
        data: {
            labels: xValues,
            datasets: [
                {
                    backgroundColor: gradient,
                    borderColor: "#3D005E",
                    borderWidth: 2,
                    pointBorderColor: "#b27aff",
                    pointBorderWidth: 5,
                    pointColor: "#b27aff",
                    data: yValues2
                },
            ]
        },
        options: chartOptions,
        // plugins: [hoverLine]
    });

    var myChart2 = new Chart(ctx2, {
        type: "line",
        data: {
            labels: xValues,
            datasets: [{
                backgroundColor: gradient,
                borderColor: "#3D005E",
                borderWidth: 2,
                pointBorderColor: "#b27aff",
                pointBorderWidth: 5,
                pointColor: "#b27aff",
                data: yValues
            }]
        },
        options: chartOptions,
    });
    var myChart3 = new Chart(ctx3, {
        type: "line",
        data: {
            labels: xValues,
            datasets: [{
                backgroundColor: gradient,
                borderColor: "#3D005E",
                borderWidth: 2,
                pointBorderColor: "#b27aff",
                pointBorderWidth: 5,
                pointColor: "#b27aff",
                data: yValues
            }]
        },
        options: chartOptions,
    });
    var myChart4 = new Chart(ctx4, {
        type: "line",
        data: {
            labels: xValues,
            datasets: [{
                backgroundColor: gradient,
                borderColor: "#3D005E",
                borderWidth: 2,
                pointBorderColor: "#b27aff",
                pointBorderWidth: 5,
                pointColor: "#b27aff",
                data: yValues
            }]
        },
        options: chartOptions,
    });

    //============Area Scatter Chart=====================
    var mostarea = [
        { y: 10, x: 1 },
        { y: 2, x: 2 },
        { y: 3, x: 3 },
        { y: 4, x: 4 },
        { y: 5, x: 5 },
        { y: 8, x: 6 }
    ];
    const data = {
        labels: ["Ryiad 1", "jedah 2", "mecca 3", "madina", "Area 1", "Area 4"],
        datasets: [{
            label: 'gggg',
            data: mostarea,
            backgroundColor: 'rgba(61, 0, 94, 0.5)'
        }],
    };
    var ctx6 = $('#area_chart');

    new Chart(ctx6, {
        type: 'scatter',
        data: data,
        options: {
            scales: {

                y: {
                    beginAtZero: true
                },

                yAxes: [{
                    display: true
                }],
                xAxes: [{
                    display: true
                }],
            },

            tooltips: {
                callbacks: {
                    title: function (tooltipItems, data) {
                        // Modify tooltip title based on your requirements
                        var dataIndex = tooltipItems[0].index;
                        return data.datasets[0].data[dataIndex].y;
                    }
                }
            }
        }
    });

    // ==================shipment  chart==================

    // var ctx4 = $('#shippment_chart');


    // // Data for the line charts
    // var shipment_data = {
    //     labels: ["January", "February", "March", "April", "May", "June"],
    //     datasets: [
    //         {
    //             label: "Returns",
    //             data: [10, 20, 30, 25, 15, 35],
    //             borderColor: "#FFD680",
    //             fill: false
    //         },
    //         {
    //             label: "Delivered",
    //             data: [5, 15, 10, 20, 30, 25],
    //             borderColor: "#B27AFF",
    //             fill: false
    //         },
    //         {
    //             label: "In Transitrr",
    //             data: [20, 10, 25, 30, 5, 15],
    //             borderColor: "#3D005E",
    //             fill: false
    //         }
    //     ]
    // };

    // // Chart options
    // var options = {
    //     responsive: true,
    //     maintainAspectRatio: false
    // };

    // // Create the chart
    // new Chart(ctx4, {
    //     type: "line",
    //     data: shipment_data,
    //     options: options
    // });

</script>
<nop-alert asp-alert-id="loadOrderStatisticsAlert" asp-alert-message="@T("Admin.SalesReport.OrderStatistics.Alert.FailedLoad")" />
<nop-alert asp-alert-id="loadCustomerStatisticsAlert" asp-alert-message="@T("Admin.Reports.Customers.CustomerStatistics.Alert.FailedLoad")" />
<nop-alert asp-alert-id="loadProductsExpireStatisticsAlert" asp-alert-message="Failed to load products about to expire statistics" />
<nop-alert asp-alert-id="loadShipmentStatisticsAlert" asp-alert-message="Failed to load shipment statistics" />

