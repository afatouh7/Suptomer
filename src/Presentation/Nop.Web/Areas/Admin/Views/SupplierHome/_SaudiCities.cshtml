<script src="~/lib_npm/PapaParse/papaparse.min.js"></script>
<script type="text/javascript" src="~/lib_npm/chartjs-chart-geo/build/Chart.Geo.min.js" asp-location="Head"></script>
<canvas id="saudiMap"></canvas>

<script>
    function getData(city) {
        return new Promise((resolve, reject) => {
            fetch(`SupplierHome/GetMostActiveOrdersInCities?city=${city.name}`)
                .then(resp => resp.json())
                .then(data => {
                    city.orders = data;
                    resolve();
                })
        })
    }

    Promise.all([
        // fetch('https://unpkg.com/us-atlas/states-10m.json').then((r) => r.json()),
        // fetch('https://unpkg.com/world-atlas@2.0.2/countries-50m.json').then((r) => r.json()),
        fetch('sau.topo.json').then((r) => r.json()),

        fetch('saudi-arabia-lat-lng.csv')
            .then((r) => r.text())
            .then((d) => Papa.parse(d, { dynamicTyping: true, header: true }).data)

    ]).then(([us, data]) => {
        let promises = [];

        data.forEach(city => {
            promises.push(getData(city));
        })

        Promise.all(promises).then(() => {
            console.log(data);
        const cities = ChartGeo.topojson.feature(us, us.objects.sau).features;

        const chart = new Chart(document.getElementById("saudiMap").getContext('2d'), {
            type: 'bubbleMap',
            //type: 'choropleth',
            data: {
                labels: data.map((d) => d.name),
                datasets: [{
                    outline: cities,
                    showOutline: true,
                    backgroundColor: '#3d005e',
                    data: data.map(city => Object.assign(city, { value: city.orders })),
                }]
            },
            options: {
                legend: {
                    display: false
                },
                plugins: {
                    datalabels: {
                        align: 'top',
                        formatter: (v) => {
                            return v.name;
                        },
                    },
                },
                scale: {
                    projection: 'geoEquirectangular',
                }
            }
        });

        });
    });
</script>