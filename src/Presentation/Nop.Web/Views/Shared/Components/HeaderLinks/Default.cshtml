@model HeaderLinksModel
@using Nop.Core.Domain.Customers
@inject Nop.Core.IWebHelper webHelper

<ul class="navbar-nav ml-auto">
    <li class="nav-item">
        <a class="nav-link page-scroll" href="/Home/MerchantPage">
            Merchant Module <span class="sr-only">(current)</span>
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link page-scroll" href="/Home/SupplierPage">
            Supplier Module
        </a>
    </li> 
    <li class="nav-item">
        <a class="nav-link page-scroll" href="#Features">Features</a>
    </li>
       <li class="nav-item">
        <a class="nav-link page-scroll" href="#about">About</a>
    </li>
      <!-- Dropdown Menu
    <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle page-scroll"
           href="#about"
           id="navbarDropdown"
           role="button"
           aria-haspopup="true"
           aria-expanded="false">About</a>
        <div class="dropdown-menu" aria-labelledby="navbarDropdown">
            <a class="dropdown-item" href="terms-conditions.html"><span class="item-text">Terms Conditions</span></a>
            <div class="dropdown-items-divide-hr"></div>
            <a class="dropdown-item" href="privacy-policy.html"><span class="item-text">Privacy Policy</span></a>
        </div>
    </li> -->
 
    <li class="nav-item">
        <a class="nav-link page-scroll" href="#why">Why</a>
    </li>

     <li class="nav-item">
        <a class="nav-link page-scroll" href="#Clients">Clients</a>
    </li>
    <!-- end of dropdown menu -->

    <li class="nav-item">
        <a class="nav-link page-scroll" href="/#contactus">Contact us</a>
    </li>
</ul>
<span class="nav-item">
    @* switch lang *@
    @* @await Component.InvokeAsync(typeof(LanguageSelectorViewComponent)) *@

        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksBefore, additionalData = Model })
        @if (Model.IsAuthenticated)
        {
           <!-- <a class="btn bg-white text-dark px-4 py-1 ml-5 no_underline" href="/supplier")">Dashboard</a> -->

           <!-- <a class="btn bg-white text-dark px-4 py-1 ml-5 no_underline" href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")@*@Model.CustomerName*@</a> -->
           <a class="btn bg-white text-dark px-4 py-1 ml-5 no_underline" href="@Url.RouteUrl("CustomerInfo")"> Dashboard</a>
           <a class="btn bg-white text-dark px-4 py-1 ml-5 no_underline" href="@Url.RouteUrl("Logout")">@T("Account.Logout")</a>
        }
        else
        {
            var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
            ? url.ToString()
            : webHelper.GetRawUrl(Context.Request);

            @if (Model.RegistrationType != UserRegistrationType.Disabled)
            {
                @* <a class="btn bg-white text-dark px-4 py-1 ml-5 no_underline" href="@Url.RouteUrl("Register", new { returnUrl })" >@T("Account.Register")</a> *@
            }
           <a class="btn bg-white text-dark px-4 py-1 ml-5 no_underline" href="@Url.RouteUrl("Login", new { returnUrl })">@T("Account.Login")</a>
        }
      
  @*   
    <button class="btn bg-white text-dark px-4 py-1 ml-5 no_underline">
        login
    </button> *@

</span>

<div class="header-links" style=" display:none !important">
    <ul>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksBefore, additionalData = Model })
        @if (Model.IsAuthenticated)
        {
            <li><a href="@Url.RouteUrl("CustomerInfo")" class="ico-account no_underline">@T("Account.MyAccount")@*@Model.CustomerName*@</a></li>
            <li><a href="@Url.RouteUrl("Logout")" class="ico-logout no_underline">@T("Account.Logout")</a></li>
        }
        else
        {
            var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
                ? url.ToString()
                : webHelper.GetRawUrl(Context.Request);

            @if (Model.RegistrationType != UserRegistrationType.Disabled)
            {
                <li><a href="@Url.RouteUrl("Register", new { returnUrl })" class="ico-register">@T("Account.Register")</a></li>
            }
            <li><a href="@Url.RouteUrl("Login", new { returnUrl })" class="ico-login">@T("Account.Login")</a></li>
        }
        @if (Model.AllowPrivateMessages)
        {
            <li>
                <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
                    <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                    <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
                </a>
            </li>
        }
        @if (Model.WishlistEnabled)
        {
            <li>
                <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist">
                    <span class="wishlist-label">@T("Wishlist")</span>
                    <span class="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                </a>
            </li>
        }
        @if (Model.ShoppingCartEnabled)
        {
            <li id="topcartlink">
                <a href="@Url.RouteUrl("ShoppingCart")" class="ico-cart">
                    <span class="cart-label">@T("ShoppingCart")</span>
                    <span class="cart-qty">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
                </a>
            </li>
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksAfter, additionalData = Model })
    </ul>
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    }
    @if (Model.ShoppingCartEnabled)
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.header').on('mouseenter', '#topcartlink', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#topcartlink', function () {
                    $('#flyout-cart').removeClass('active');
                });
                $('.header').on('mouseenter', '#flyout-cart', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#flyout-cart', function () {
                    $('#flyout-cart').removeClass('active');
                });
            });
        </script>
    }
</div>
